generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Film {
  id             Int    @id @default(autoincrement())
  name           String
  slug           String    @unique
  poster_url     String?
  thumb_url      String?
  original_name  String
  time           String?
  total_episodes Int?
  quality        String
  director       String
  casts          String
  description    String
  type           Int @default(0)  // 0: series, 1: movie
  country_id     Int
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  deleted_at     DateTime?

  // relations
  country        Country        @relation(fields: [country_id], references: [id])
  episodes       Episode[]
  filmCategories FilmCategory[]

  @@map("films")
}

model Episode {
  id         Int    @id @default(autoincrement())
  name       String
  url        String
  film_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // relations
  film           Film          @relation(fields: [film_id], references: [id])
  film_histories FilmHistory[]

  @@map("episodes")
}

model Category {
  id         Int    @id @default(autoincrement())
  name       String    @unique
  slug       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // relations
  films FilmCategory[]

  @@map("categories")
}

model FilmCategory {
  id          Int    @id @default(autoincrement())
  film_id     Int
  category_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  // relations
  category Category @relation(fields: [category_id], references: [id])
  film     Film     @relation(fields: [film_id], references: [id])

  @@map("film_category")
}

model Country {
  id         Int    @id @default(autoincrement())
  name       String   @unique
  slug       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  Film       Film[]

  @@map("countries")
}

model User {
  id         Int    @id @default(autoincrement())
  name       String
  password   String
  email      String    @unique
  role       Int
  created_at DateTime
  updated_at DateTime
  deleted_at DateTime?

  // relations
  film_histories FilmHistory[]

  @@map("users")
}

model FilmHistory {
  id         Int    @id @default(autoincrement())
  user_id    Int
  episode_id Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  // relations
  user    User?    @relation(fields: [user_id], references: [id])
  episode Episode @relation(fields: [episode_id], references: [id])

  @@map("film_histories")
}
